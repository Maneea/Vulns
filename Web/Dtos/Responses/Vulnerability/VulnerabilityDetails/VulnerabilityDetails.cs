using System.Globalization;

using Vulns.Core;

namespace Vulns.Web;

public class VulnerabilityDetails : IResponse
{
    public DateTime PublishedAt { get; set; }
    public DateTime ModifiedAt { get; set; }
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;
    public String Id { get; set; } = null!;
    public String Description { get; set; } = null!;
    public IssuerFragment? Issuer { get; set; } = null;
    public string VectorString { get; set; } = DtoConstants.Unknown;
    public double BaseScore { get; set; }
    public double ImpactScore { get; set; }
    public double ExploitabilityScore { get; set; }
    public bool HasExploit { get; set; }
    public bool HasFix { get; set; }
    public Boolean ObtainAllPrivilege { get; set; }
    public Boolean ObtainUserPrivilege { get; set; }
    public Boolean ObtainOtherPrivilege { get; set; }
    public Boolean UserInteractionRequired { get; set; }
    public string Level { get; set; } = DtoConstants.Unspecified;
    public string ConfidentialityImpact { get; set; } = DtoConstants.Unspecified;
    public string IntegrityImpact { get; set; } = DtoConstants.Unspecified;
    public string AvailabilityImpact { get; set; } = DtoConstants.Unspecified;
    public string AttackVector { get; set; } = DtoConstants.Unspecified;
    public string AttackComplexity { get; set; } = DtoConstants.Unspecified;
    public string RequiredAuthentication { get; set; } = DtoConstants.Unspecified;
    public List<ProductFragment>? VulnerableProducts { get; set; }
    public List<WeaknessDetails>? Weaknesses { get; set; }
    public List<VulnerabilityReference>? References { get; set; }

    public VulnerabilityDetails RemoveDuplicateProducts()
    {
        VulnerableProducts = VulnerableProducts?.DistinctBy(p => new { p.Vendor, p.Product, p.Title }).ToList();
        return this;
    }

    public VulnerabilityDetails GenerateProductTitles()
    {
        VulnerableProducts?.ForEach(p =>
        {
            var lowerTitle = p.Title?.ToLower() ?? string.Empty;
            p.Product = lowerTitle.IndexOf(p.Product) >= 0 && p.Title != null ? p.Title.Substring(lowerTitle.IndexOf(p.Product), p.Product.Length) : p.Product.Humanize();
            p.Vendor = lowerTitle.IndexOf(p.Vendor) >= 0 && p.Title != null ? p.Title.Substring(lowerTitle.IndexOf(p.Vendor), p.Vendor.Length) : p.Vendor.Humanize();
            p.Title = string.IsNullOrEmpty(p.Title) ?
                $"{(p.Product.Contains(p.Vendor) ? "" : p.Vendor)} {p.Product}" :
                p.Title;
        });
        return this;
    }
}