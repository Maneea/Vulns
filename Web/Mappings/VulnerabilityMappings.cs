using AutoMapper;

using Vulns.App;
using Vulns.Core;
namespace Vulns.Web;

internal class VulnerabilityMappings : Profile
{
    public VulnerabilityMappings()
    {
        CreateMap<Vulnerability, string>().ConvertUsing(r => r.Id);
        CreateMap<Vulnerability, VulnerabilityDetails>()
            .ForMember(d => d.PublishedAt, o => o.MapFrom(s => s.CreatedAt))
            .AfterMap((src, dest, ctx) =>
            {
                ctx.Mapper.Map(src.Severity, dest);
                dest.RemoveDuplicateProducts().GenerateProductTitles();
            });

        CreateMap<Vulnerability, VulnerabilityFragment>()
            .ForMember(d => d.PublishedAt, o => o.MapFrom(s => s.CreatedAt))
            .ForMember(d => d.Issuer, o => o.MapFrom(s => s.Issuer != null ? s.Issuer.ShortName : s.IssuerEmail))
            .ForMember(d => d.Issuer, o => o.MapFrom(s => s.IssuerId))
            .AfterMap((src, dest, ctx) =>
            {
                ctx.Mapper.Map(src.Severity, dest);
                dest.RemoveDuplicateProducts().GenerateProductTitles();
            });

        CreateMap<VulnerabilitySeverity, VulnerabilityFragment>();
        CreateMap<VulnerabilitySeverity, VulnerabilityDetails>();
        CreateMap<Vulns.Core.VulnerabilityReference, VulnerabilityReference>();

        CreateMap<VulnerabilitySearchFilters, VulnerabilitySearchCriteria>()
            .ForMember(d => d.VulnerableProducts, o => o.MapFrom(s => s.VulnerableProducts));

        CreateMap<VulnerabilityAggregationFilters, VulnerabilityAggregationCriteria>()
            .AfterMap((s, d, ctx) => ctx.Mapper.Map(s.SubAggregation, d.SubAggregation));

        CreateMap<VulnerabilityAggregationType, AggregationType>();
        CreateMap<VulnerabilityAggregationField, Vulns.App.VulnerabilityAggregationField>();
    }
}