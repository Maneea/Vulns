using AutoMapper;

using Vulns.Core;
namespace Vulns.Infrastructure;

internal class VulnerabilityDocumentMappings : Profile
{
    public VulnerabilityDocumentMappings()
    {
        // ------------------------------- Entity to Document -------------------------------  //
        CreateMap<Issuer, VulnerabilityIssuerDocument>();
        CreateMap<Product, VulnerabilityProductDocument>()
            .AfterMap((src, dest, ctx) => ctx.Mapper.Map(src.Uri, dest));
        CreateMap<VulnerabilityReference, VulnerabilityReferenceDocument>()
            .ForMember(d => d.Tags, o => o.MapFrom(s => s.Tags.Select(_ => _.Name)));
        CreateMap<VulnerabilitySeverity, VulnerabilitySeverityDocument>()
            .ForMember(d => d.Level, o => o.MapFrom(s => s.Level.Name));
        CreateMap<ProductUri, VulnerabilityProductDocument>()
            .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.ToString()))
            .ForMember(d => d.Vendor, o => o.MapFrom(s => s.FormattedVendor))
            .ForMember(d => d.Product, o => o.MapFrom(s => s.FormattedProduct))
            .ForMember(d => d.Version, o => o.MapFrom(s => s.FormattedVersion));
        CreateMap<Vulnerability, VulnerabilityDocument>()
            .ForMember(d => d.ConfidentialityImpact, o => o.MapFrom(s => s.ConfidentialityImpact.Name))
            .ForMember(d => d.IntegrityImpact, o => o.MapFrom(s => s.IntegrityImpact.Name))
            .ForMember(d => d.AvailabilityImpact, o => o.MapFrom(s => s.AvailabilityImpact.Name))
            .ForMember(d => d.AttackComplexity, o => o.MapFrom(s => s.AttackComplexity.Name))
            .ForMember(d => d.AttackVector, o => o.MapFrom(s => s.AttackVector.Name))
            .ForMember(d => d.RequiredAuthentication, o => o.MapFrom(s => s.RequiredAuthentication.Name))
            .ForMember(d => d.VulnerableVendorNames, o => o.MapFrom(s => s.VulnerableProducts.Select(d => d.Uri.FormattedVendor).Distinct()))
            .ForMember(d => d.VulnerableProductsNames, o => o.MapFrom(s => s.VulnerableProducts.Select(d => d.Uri.FormattedProduct).Distinct()))
            .ForMember(d => d.Weaknesses, o => o.MapFrom(s => s.Weaknesses.Select(w => w.Id).Distinct()))
            .ForMember(d => d.WeaknessesNames, o => o.MapFrom(s => s.Weaknesses.Select(w => w.Name).Distinct()))
            .ForMember(d => d.WeaknessesAffectedResources, o => o.MapFrom(s => s.Weaknesses.SelectMany(w => w.AffectedResources != null ? w.AffectedResources.Select(war => war.Name) : new List<string>()).Distinct()))
            .ForMember(d => d.WeaknessesPlatforms, o => o.MapFrom(s => s.Weaknesses.SelectMany(w => w.Platforms.Select(wp => $"{wp.Name} {wp.Type}")).Where(p => !p.Contains("Independent")).Distinct()));

        // ------------------------------- Document to Entity -------------------------------  //
        CreateMap<VulnerabilityIssuerDocument, Issuer>();
        CreateMap<VulnerabilityProductDocument, Product>()
            .ConstructUsing(s => new Product(s.Id!))
            .AfterMap((src, dest, context) => dest.Uri.ApplyFormatting(dest.Title ?? string.Empty));
        CreateMap<VulnerabilitySeverityDocument, VulnerabilitySeverity>()
            .ForMember(d => d.Level, o => o.MapFrom(s => VulnerabilitySeverityLevel.FromName(s.Level!, false)));
        CreateMap<VulnerabilityReferenceDocument, VulnerabilityReference>()
            .ForMember(d => d.Tags, o => o.MapFrom(
                s => s.Tags.Any() ? VulnerabilityReferenceTag.FromName(string.Join(", ", s.Tags), false, false) : new List<VulnerabilityReferenceTag>()));
        CreateMap<VulnerabilityDocument, Vulnerability>()
            .ForMember(d => d.ConfidentialityImpact, o => o.MapFrom(s => VulnerabilityImpact.FromName(s.ConfidentialityImpact!, false)))
            .ForMember(d => d.IntegrityImpact, o => o.MapFrom(s => VulnerabilityImpact.FromName(s.IntegrityImpact!, false)))
            .ForMember(d => d.AvailabilityImpact, o => o.MapFrom(s => VulnerabilityImpact.FromName(s.AvailabilityImpact!, false)))
            .ForMember(d => d.AttackVector, o => o.MapFrom(s => VulnerabilityAttackVector.FromName(s.AttackVector!, false)))
            .ForMember(d => d.AttackComplexity, o => o.MapFrom(s => VulnerabilityAttackComplexity.FromName(s.AttackComplexity!, false)))
            .ForMember(d => d.RequiredAuthentication, o => o.MapFrom(s => VulnerabilityRequiredAuthentication.FromName(s.RequiredAuthentication!, false)))
            .ForMember(d => d.Weaknesses, o => o.MapFrom(s => s.Weaknesses != null ? s.Weaknesses.Select(wId => new Weakness(){Id = wId}) : new List<Weakness>()));
    }
}