using Microsoft.EntityFrameworkCore;

using Vulns.Core;

namespace Vulns.Infrastructure;

internal static class VulnerabilityModelConfiguration
{
    internal static void ConfigureVulnerabilityModel(this ModelBuilder modelBuilder)
    {
        var builder = modelBuilder.Entity<Vulnerability>();
        builder.OwnsOne<VulnerabilitySeverity>(v => v.Severity, severity =>
        {
            severity.WithoutPrefix();
            severity
                .Property(s => s.Level)
                .HasConversion(val => val.ToString(), str => VulnerabilitySeverityLevel.FromName(str, false))
                .HasColumnName(nameof(Vulnerability.Severity));
        });

        builder.HasOne<Issuer>(v => v.Issuer).WithMany(c => c.PublishedVulnerabilities).IsRequired(false);
        builder.HasMany<Product>(v => v.VulnerableProducts).WithMany(p => p.Vulnerabilities);
        builder.HasMany<Weakness>(v => v.Weaknesses).WithMany(w => w.Vulnerabilities);
        builder.HasMany(v => v.References);

        builder
            .Property(v => v.ConfidentialityImpact)
            .HasConversion(val => val.ToString(), str => VulnerabilityImpact.FromName(str, false));

        builder
            .Property(v => v.IntegrityImpact)
            .HasConversion(val => val.ToString(), str => VulnerabilityImpact.FromName(str, false));

        builder
            .Property(v => v.AvailabilityImpact)
            .HasConversion(val => val.ToString(), str => VulnerabilityImpact.FromName(str, false));

        builder
            .Property(v => v.AttackVector)
            .HasConversion(val => val.ToString(), str => VulnerabilityAttackVector.FromName(str, false));

        builder
            .Property(v => v.AttackComplexity)
            .HasConversion(val => val.ToString(), str => VulnerabilityAttackComplexity.FromName(str, false));

        builder
            .Property(v => v.RequiredAuthentication)
            .HasConversion(val => val.ToString(), str => VulnerabilityRequiredAuthentication.FromName(str, false));

        modelBuilder.Entity<VulnerabilityReference>()
            .Property(r => r.Tags)
            .IsRequired(false)
            .HasConversion(
                val => val.Any() ? string.Join(", ", val.Select(_ => _.Name)) : null,
                str => VulnerabilityReferenceTag.FromName(str!, false, false).ToList());
    }
}