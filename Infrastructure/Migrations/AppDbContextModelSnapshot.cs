// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vulns.Infrastructure;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.UseGuidCollation(modelBuilder, "");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductVulnerability", b =>
                {
                    b.Property<string>("VulnerabilitiesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VulnerableProductsId")
                        .HasColumnType("varchar(500)");

                    b.HasKey("VulnerabilitiesId", "VulnerableProductsId");

                    b.HasIndex("VulnerableProductsId");

                    b.ToTable("ProductVulnerability");
                });

            modelBuilder.Entity("VulnerabilityWeakness", b =>
                {
                    b.Property<string>("VulnerabilitiesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WeaknessesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("VulnerabilitiesId", "WeaknessesId");

                    b.HasIndex("WeaknessesId");

                    b.ToTable("VulnerabilityWeakness");
                });

            modelBuilder.Entity("Vulns.Core.Issuer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CveNumberingAuthority");
                });

            modelBuilder.Entity("Vulns.Core.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Vulns.Core.ProductReference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReference");
                });

            modelBuilder.Entity("Vulns.Core.Vulnerability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AttackComplexity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AttackVector")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AvailabilityImpact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConfidentialityImpact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasExploit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasFix")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IntegrityImpact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IssuerEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IssuerId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequiredAuthentication")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.ToTable("Vulnerability");
                });

            modelBuilder.Entity("Vulns.Core.VulnerabilityReference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VulnerabilityId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("VulnerabilityReference");
                });

            modelBuilder.Entity("Vulns.Core.Weakness", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AffectedResources")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExploitationLikelihood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Weakness");
                });

            modelBuilder.Entity("Vulns.Core.WeaknessConsequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Impact")
                        .HasColumnType("longtext");

                    b.Property<string>("Likelihood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext");

                    b.Property<string>("WeaknessId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("WeaknessId");

                    b.ToTable("WeaknessConsequence");
                });

            modelBuilder.Entity("Vulns.Core.WeaknessDetection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Effectiveness")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EffectivenessNotes")
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WeaknessId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("WeaknessId");

                    b.ToTable("WeaknessDetection");
                });

            modelBuilder.Entity("Vulns.Infrastructure.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("DashboardWidgets")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vulns.Infrastructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vulns.Infrastructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vulns.Infrastructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vulns.Infrastructure.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVulnerability", b =>
                {
                    b.HasOne("Vulns.Core.Vulnerability", null)
                        .WithMany()
                        .HasForeignKey("VulnerabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vulns.Core.Product", null)
                        .WithMany()
                        .HasForeignKey("VulnerableProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VulnerabilityWeakness", b =>
                {
                    b.HasOne("Vulns.Core.Vulnerability", null)
                        .WithMany()
                        .HasForeignKey("VulnerabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vulns.Core.Weakness", null)
                        .WithMany()
                        .HasForeignKey("WeaknessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vulns.Core.Product", b =>
                {
                    b.OwnsOne("Vulns.Core.ProductUri", "Uri", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("varchar(500)");

                            b1.Property<string>("Edition")
                                .HasColumnType("longtext")
                                .HasColumnName("Edition");

                            b1.Property<string>("FormattedEdition")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedEdition");

                            b1.Property<string>("FormattedLanguage")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedLanguage");

                            b1.Property<string>("FormattedOther")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedOther");

                            b1.Property<string>("FormattedProduct")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedProduct");

                            b1.Property<string>("FormattedSoftwareEdition")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedSoftwareEdition");

                            b1.Property<string>("FormattedTargetHardware")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedTargetHardware");

                            b1.Property<string>("FormattedTargetSoftware")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedTargetSoftware");

                            b1.Property<string>("FormattedUpdate")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedUpdate");

                            b1.Property<string>("FormattedVendor")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedVendor");

                            b1.Property<string>("FormattedVersion")
                                .HasColumnType("longtext")
                                .HasColumnName("FormattedVersion");

                            b1.Property<string>("Language")
                                .HasColumnType("longtext")
                                .HasColumnName("Language");

                            b1.Property<string>("Other")
                                .HasColumnType("longtext")
                                .HasColumnName("Other");

                            b1.Property<string>("Product")
                                .HasColumnType("longtext")
                                .HasColumnName("Product");

                            b1.Property<int>("ProductType")
                                .HasColumnType("int")
                                .HasColumnName("ProductType");

                            b1.Property<string>("SoftwareEdition")
                                .HasColumnType("longtext")
                                .HasColumnName("SoftwareEdition");

                            b1.Property<string>("TargetHardware")
                                .HasColumnType("longtext")
                                .HasColumnName("TargetHardware");

                            b1.Property<string>("TargetSoftware")
                                .HasColumnType("longtext")
                                .HasColumnName("TargetSoftware");

                            b1.Property<string>("Update")
                                .HasColumnType("longtext")
                                .HasColumnName("Update");

                            b1.Property<string>("Vendor")
                                .HasColumnType("longtext")
                                .HasColumnName("Vendor");

                            b1.Property<string>("Version")
                                .HasColumnType("longtext")
                                .HasColumnName("Version");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Uri")
                        .IsRequired();
                });

            modelBuilder.Entity("Vulns.Core.ProductReference", b =>
                {
                    b.HasOne("Vulns.Core.Product", null)
                        .WithMany("References")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Vulns.Core.Vulnerability", b =>
                {
                    b.HasOne("Vulns.Core.Issuer", "Issuer")
                        .WithMany("PublishedVulnerabilities")
                        .HasForeignKey("IssuerId");

                    b.OwnsOne("Vulns.Core.VulnerabilitySeverity", "Severity", b1 =>
                        {
                            b1.Property<string>("VulnerabilityId")
                                .HasColumnType("varchar(255)");

                            b1.Property<double>("BaseScore")
                                .HasColumnType("double")
                                .HasColumnName("BaseScore");

                            b1.Property<double>("ExploitabilityScore")
                                .HasColumnType("double")
                                .HasColumnName("ExploitabilityScore");

                            b1.Property<double>("ImpactScore")
                                .HasColumnType("double")
                                .HasColumnName("ImpactScore");

                            b1.Property<string>("Level")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Severity");

                            b1.Property<bool>("ObtainAllPrivilege")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("ObtainAllPrivilege");

                            b1.Property<bool>("ObtainOtherPrivilege")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("ObtainOtherPrivilege");

                            b1.Property<bool>("ObtainUserPrivilege")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("ObtainUserPrivilege");

                            b1.Property<bool>("UserInteractionRequired")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("UserInteractionRequired");

                            b1.Property<string>("VectorString")
                                .HasColumnType("longtext")
                                .HasColumnName("VectorString");

                            b1.HasKey("VulnerabilityId");

                            b1.ToTable("Vulnerability");

                            b1.WithOwner()
                                .HasForeignKey("VulnerabilityId");
                        });

                    b.Navigation("Issuer");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("Vulns.Core.VulnerabilityReference", b =>
                {
                    b.HasOne("Vulns.Core.Vulnerability", null)
                        .WithMany("References")
                        .HasForeignKey("VulnerabilityId");
                });

            modelBuilder.Entity("Vulns.Core.Weakness", b =>
                {
                    b.HasOne("Vulns.Core.Weakness", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.OwnsMany("Vulns.Core.WeaknessPlatform", "Platforms", b1 =>
                        {
                            b1.Property<string>("WeaknessId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Id")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext");

                            b1.Property<string>("Prelavence")
                                .HasColumnType("longtext");

                            b1.Property<string>("Type")
                                .HasColumnType("longtext");

                            b1.HasKey("WeaknessId", "Id");

                            b1.ToTable("WeaknessPlatform");

                            b1.WithOwner()
                                .HasForeignKey("WeaknessId");
                        });

                    b.Navigation("Parent");

                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("Vulns.Core.WeaknessConsequence", b =>
                {
                    b.HasOne("Vulns.Core.Weakness", null)
                        .WithMany("Consequences")
                        .HasForeignKey("WeaknessId");
                });

            modelBuilder.Entity("Vulns.Core.WeaknessDetection", b =>
                {
                    b.HasOne("Vulns.Core.Weakness", null)
                        .WithMany("DetectionMethods")
                        .HasForeignKey("WeaknessId");
                });

            modelBuilder.Entity("Vulns.Core.Issuer", b =>
                {
                    b.Navigation("PublishedVulnerabilities");
                });

            modelBuilder.Entity("Vulns.Core.Product", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("Vulns.Core.Vulnerability", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("Vulns.Core.Weakness", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Consequences");

                    b.Navigation("DetectionMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
