using Microsoft.Extensions.DependencyInjection;

using Vulns.Core;
using Vulns.Jobs.Base;
using Vulns.Jobs.Products;

namespace Vulns.Jobs.Vulnerabilities;
public class VulnerabilityProductLinkageEnricher : IEnricher<Vulnerability>
{
    public int ExecutionOrder => 1;

    public string Name => nameof(VulnerabilityProductLinkageEnricher);

    public IEnumerable<Vulnerability> Enrich(IEnumerable<Vulnerability> entities, IServiceScope scope)
    {
        var cpeRepo = scope.ServiceProvider.GetRequiredService<IRepository<Product>>();
        var affectedProductsUris = entities.SelectMany(v => v.VulnerableProducts).Select(p => p.Id).Distinct().ToArray();

        SortedDictionary<string, Product> dictionary = new();
        SortedList<string, Product> productsFromDb = new();

        foreach (var product in cpeRepo.GetManyAsync(affectedProductsUris, default).Result)
            productsFromDb.Add(product.Id, product);

        foreach (var vuln in entities)
        {
            var originalVulnProducts = vuln.VulnerableProducts;
            vuln.VulnerableProducts = new List<Product>();
            foreach (var product in originalVulnProducts)
            {
                if (productsFromDb.ContainsKey(product.Id) && !dictionary.ContainsKey(product.Id))
                    dictionary.Add(product.Id, productsFromDb[product.Id]);
                else if (!dictionary.ContainsKey(product.Id))
                    dictionary.Add(product.Id, new(product.Id));
                if (dictionary[product.Id].CreatedAt == default)
                    dictionary[product.Id].CreatedAt = vuln.ModifiedAt ?? vuln.CreatedAt;
                vuln.VulnerableProducts.Add(dictionary[product.Id]);
            }
        }

        // Enrich Titleless Products. Gonna cheat here x)
        new ProductNameFormattingEnricher().Enrich(
            entities.SelectMany(_ => _.VulnerableProducts).Where(_ => string.IsNullOrEmpty(_.Title)),
            scope
        );
        return entities;
    }

}