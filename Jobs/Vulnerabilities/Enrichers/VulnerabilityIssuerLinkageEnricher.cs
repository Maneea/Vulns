using System.Text.RegularExpressions;

using Microsoft.Extensions.DependencyInjection;

using Vulns.Core;
using Vulns.Infrastructure;
using Vulns.Jobs.Base;

namespace Vulns.Jobs.Vulnerabilities;
public class VulnerabilityIssuerLinkageEnricher : IEnricher<Vulnerability>
{
    public int ExecutionOrder => 3;

    public string Name => nameof(VulnerabilityIssuerLinkageEnricher);

    public IEnumerable<Vulnerability> Enrich(IEnumerable<Vulnerability> entities, IServiceScope scope)
    {
        var cnaRepo = scope.ServiceProvider.GetRequiredService<IssuerRepository>();
        var cnas = cnaRepo.AllAsync(default).Result;
        var nonAlpha = new Regex(@"[^A-Za-z0-9]+");
        foreach (var vuln in entities)
        {
            string emailUser = nonAlpha.Replace(vuln.IssuerEmail!.Split('@')[0], "").ToLower();
            string fullDomain = vuln.IssuerEmail!.Split('@')[1];
            string domainName = fullDomain.Split('.').SkipLast(1).Last();
            vuln.Issuer = cnas.Where(cna =>
            {
                var cnaNormalizedOrg = nonAlpha.Replace(cna.Organization, "").ToLower();
                var cnaNormalizedName = nonAlpha.Replace(cna.ShortName, "").ToLower();
                return (cna.Email == vuln.IssuerEmail) ||
                    (cna.ShortName.ToLower() == domainName) ||
                    (cna.Email?.Split('@')[1].Split('.').SkipLast(1).Last() == domainName) ||
                    (cna.ShortName.ToLower() == emailUser) ||
                    (cnaNormalizedOrg == nonAlpha.Replace(domainName, "")) ||
                    (cnaNormalizedName == nonAlpha.Replace(domainName, "")) ||
                    (cnaNormalizedName.Contains(domainName) && domainName.Length >= 4) ||
                    (cnaNormalizedOrg.Contains(domainName) && domainName.Length >= 4);
            }).FirstOrDefault();
            vuln.IssuerId = vuln.Issuer?.Id;
        }
        return entities;
    }
}